//! `SeaORM` Entity. Generated by sea-orm-codegen 0.10.6

use std::{fmt, str::FromStr};

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "pocket_history")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    pub event: String,
    pub pocket_id: i32,
    pub message: String,
    pub created_at: DateTimeWithTimeZone,
}

#[derive(Debug)]
pub enum PocketEvent {
    Add,
    RightAnswer,
    WrongAnswer,
}

impl std::fmt::Display for PocketEvent {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{:?}", self)
    }
}

impl FromStr for PocketEvent {
    type Err = ();

    fn from_str(input: &str) -> Result<PocketEvent, Self::Err> {
        match input {
            "Add" => Ok(PocketEvent::Add),
            "RightAnswer" => Ok(PocketEvent::RightAnswer),
            "WrongAnswer" => Ok(PocketEvent::WrongAnswer),
            _ => Err(()),
        }
    }
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::cards_in_pocket::Entity",
        from = "Column::PocketId",
        to = "super::cards_in_pocket::Column::Id",
        on_update = "Cascade",
        on_delete = "Cascade"
    )]
    CardsInPocket,
}

impl Related<super::cards_in_pocket::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::CardsInPocket.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
